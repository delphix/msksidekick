name: msksidekick

on:
  push:
    branches: [ develop ]

env:
  PYTHON_VERSION: 3.7

jobs:

#   centos7:
#       runs-on: ubuntu-latest
#       steps:
#         - name: checkout msksidekick code
#           uses: actions/checkout@master
#
#         - name: Set up a Python container
#           uses: docker://ajayjt/pycentos7:latest
#
#         - name: Get the version
#           id: get_version
#           run: |
#             if (echo ${GITHUB_REF} | grep "/tags/" > /dev/null); then
#               SOURCE_TAG=${GITHUB_REF#refs/tags/}
#             elif (echo ${GITHUB_REF} | grep "/heads/" > /dev/null); then
#               SOURCE_TAG=${GITHUB_REF#refs/heads/}
#             else
#               exit 1
#             fi
#             VERSION_TAG=$(cat ./msksidekick.py|grep "VERSION = "|awk -F' = ' '{ print $2 }'|sed 's/"//g')
#             FILENAME="msksidekick-${VERSION_TAG//[$'\t\r\n ']}-linux7.tar.gz"
#             echo SOURCE_TAG=$SOURCE_TAG
#             echo FILENAME=$FILENAME
#             echo SOURCE_TAG=$SOURCE_TAG >> $GITHUB_ENV
#             echo FILENAME=$FILENAME >> $GITHUB_ENV
#
#         - name: rename toolkit
#           run: |
#             echo FILENAME=${{ env.FILENAME }}
#             tar -C dist -czvf ${{ env.FILENAME }} msksidekick
#
#         - name: Upload centos 7
#           uses: actions/upload-artifact@v1
#           with:
#             name: linux7build
#             path: ${{ env.FILENAME }}
#
##   amznlinux2023:
##      runs-on: ubuntu-latest
##      container:
##        image: amazonlinux:2023
##
##      steps:
##      - name: Checkout code
##        uses: actions/checkout@v2
##
##      - name:  Install Python 3.8 (pip is bundled with Python 3.8+)
##        run: |
##          dnf install -y python38
##          alternatives --set python /usr/bin/python3.8
##          python --version
##
##      - name: Install dependencies
##        run: |
##          dnf install -y wget
##          wget https://bootstrap.pypa.io/get-pip.py
##          python get-pip.py
##          pip install pyinstaller
##
##      - name: Install binutils
##        run: dnf install -y binutils
##
##      - name: List contents of the working directory
##        run: ls -la
##
##      - name: Get the version
##        id: get_version
##        run: |
##          if (echo ${GITHUB_REF} | grep "/tags/" > /dev/null); then
##            SOURCE_TAG=${GITHUB_REF#refs/tags/}
##          elif (echo ${GITHUB_REF} | grep "/heads/" > /dev/null); then
##            SOURCE_TAG=${GITHUB_REF#refs/heads/}
##          else
##            exit 1
##          fi
##
##          VERSION_TAG=$(cat ./msksidekick.py|grep "VERSION = "|awk -F' = ' '{ print $2 }'|sed 's/"//g')
##          FILENAME="msksidekick-${VERSION_TAG//[$'\t\r\n ']}-amznlinux2023.tar.gz"
##          echo SOURCE_TAG=$SOURCE_TAG
##          echo FILENAME=$FILENAME
##          echo SOURCE_TAG=$SOURCE_TAG >> $GITHUB_ENV
##          echo FILENAME=$FILENAME >> $GITHUB_ENV
##          pyinstaller --onefile --clean --hidden-import pkg_resources msksidekick.py
##
##      - name: rename compiled utility
##        run: |
##          echo FILENAME=${{ env.FILENAME }}
##          tar -C dist -czvf ${{ env.FILENAME }} msksidekick
##
##      - name: Upload artifact
##        uses: actions/upload-artifact@v2
##        with:
##          name: amznlinux2023build
##          path: ${{ env.FILENAME }}
#
#   redhat8:
#      runs-on: ubuntu-latest
#      container:
#        image: registry.access.redhat.com/ubi8/ubi
#
#      steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name:  Install Python 3.8 (pip is bundled with Python 3.8+)
#        run: |
#          dnf install -y python38
#          alternatives --set python /usr/bin/python3.8
#          python --version
#
#      - name: Install dependencies
#        run: |
#          dnf install -y wget
#          wget https://bootstrap.pypa.io/get-pip.py
#          python get-pip.py
#          pip install pyinstaller
#
#      - name: Install binutils
#        run: dnf install -y binutils
#
#      - name: Get the version
#        id: get_version
#        run: |
#          if (echo ${GITHUB_REF} | grep "/tags/" > /dev/null); then
#            SOURCE_TAG=${GITHUB_REF#refs/tags/}
#          elif (echo ${GITHUB_REF} | grep "/heads/" > /dev/null); then
#            SOURCE_TAG=${GITHUB_REF#refs/heads/}
#          else
#            exit 1
#          fi
#
#          VERSION_TAG=$(cat ./msksidekick.py|grep "VERSION = "|awk -F' = ' '{ print $2 }'|sed 's/"//g')
#          FILENAME="msksidekick-${VERSION_TAG//[$'\t\r\n ']}-linux8.tar.gz"
#          echo SOURCE_TAG=$SOURCE_TAG
#          echo FILENAME=$FILENAME
#          echo SOURCE_TAG=$SOURCE_TAG >> $GITHUB_ENV
#          echo FILENAME=$FILENAME >> $GITHUB_ENV
#          pyinstaller --onefile --clean --hidden-import pkg_resources msksidekick.py
#
#      - name: rename compiled utility
#        run: |
#          echo FILENAME=${{ env.FILENAME }}
#          tar -C dist -czvf ${{ env.FILENAME }} msksidekick
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: linux8build
#          path: ${{ env.FILENAME }}


   ubuntu-latest:
     runs-on: ubuntu-latest
     container: ajayjt/pyubuntu18:latest

     steps:

      - name: Install and Configure Recent Git
        run: |
          apt-get update
          apt-get install -y software-properties-common
          add-apt-repository ppa:git-core/ppa
          apt-get update
          apt-get install -y git
          git config --global --add safe.directory `pwd` # Fix "fatal: detected dubious ownership in repository at '/__w/<user>/<repo>'""         

      # See documentation at:
      # - https://apt.kitware.com/
      # - https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line
      - name: Install Recent CMake
        run: |
          apt update && apt install gnupg2 -y
          apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 4B63CF8FDE49746E98FA01DDAD19BAB3CBF125EA
          apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys A1715D88E1DF1F24
          apt-get install -y gpg wget
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6AF7F09730B3F0A4
          apt-add-repository "deb https://apt.kitware.com/ubuntu/ bionic main"
          apt-get update
          apt-get install -y cmake

      - name: Install Other Dependencies
        run: |
          apt-get update
          apt-get install -y build-essential libfreetype6-dev libharfbuzz-dev

      # By default, actions/checkout will only check out the last commit. For
      # pull requests, this is a temporary merge commit used to test integration
      # against the master branch. Therefore, in order to get the actual commit
      # message we are interested in, we need to fetch more than one commit.
      # Getting more commits can also be helpful for computing human-readable
      # commit ID, such as 2020-12-16.3 for the 4th commit of the day.

      - name: checkout msksidekick code
        uses: actions/checkout@v2

#      - name: checkout msksidekick code
#        uses: actions/checkout@master

      # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables
      #
      # Note: in a Docker container, we have:
      # - ${{github.workspace}} = /home/runner/work/test-cpp-github-actions/test-cpp-github-actions
      # - $GITHUB_WORKSPACE     = /__w/test-cpp-github-actions/test-cpp-github-actions
      #
      # It's best to use ${{github.workspace}} in `working-directory`, and $GITHUB_WORKSPACE in `run`
      #
      - name: Print useful environment variables
        if:
        run: |
          echo "GITHUB_WORKFLOW:      $GITHUB_WORKFLOW"
          echo "GITHUB_RUN_ID:        $GITHUB_RUN_ID"
          echo "GITHUB_RUN_NUMBER:    $GITHUB_RUN_NUMBER"
          echo "GITHUB_ACTION:        $GITHUB_ACTION"
          echo "GITHUB_ACTIONS:       $GITHUB_ACTIONS"
          echo "GITHUB_ACTOR:         $GITHUB_ACTOR"
          echo "GITHUB_REPOSITORY:    $GITHUB_REPOSITORY"
          echo "GITHUB_EVENT_NAME:    $GITHUB_EVENT_NAME"
          echo "GITHUB_EVENT_PATH:    $GITHUB_EVENT_PATH"
          echo "GITHUB_WORKSPACE:     $GITHUB_WORKSPACE"
          echo "GITHUB_SHA:           $GITHUB_SHA"
          echo "GITHUB_REF:           $GITHUB_REF"
          echo "GITHUB_HEAD_REF:      $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF:      $GITHUB_BASE_REF"
          echo "GITHUB_SERVER_URL:    $GITHUB_SERVER_URL"
          echo "GITHUB_API_URL:       $GITHUB_API_URL"
          echo "GITHUB_GRAPHQL_URL:   $GITHUB_GRAPHQL_URL"
          echo "COMMIT_BRANCH:        $COMMIT_BRANCH"
          echo "COMMIT_MESSAGE:       $COMMIT_MESSAGE"

      - name: Setup Python
        run: |
          add-apt-repository ppa:deadsnakes/ppa && \
          apt install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-dev python${PYTHON_VERSION}-distutils && \
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 && \
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 2

      - name: Get the version
        id: get_version
        run: |
          pwd
          ls -ltr
          if (echo ${GITHUB_REF} | grep "/tags/" > /dev/null); then
            SOURCE_TAG=${GITHUB_REF#refs/tags/}
          elif (echo ${GITHUB_REF} | grep "/heads/" > /dev/null); then
            SOURCE_TAG=${GITHUB_REF#refs/heads/}
          else
            exit 1
          fi
          id -a
          echo SOURCE_TAG=$SOURCE_TAG
          VERSION_TAG=$(cat ./msksidekick.py|grep "VERSION = "|awk -F' = ' '{ print $2 }'|sed 's/"//g')
          #FILENAME="msksidekick-${VERSION_TAG//[$'\t\r\n ']}-ubuntu18.tar.gz"
          FILENAME="msksidekick-2.0.8.5-ubuntu18.tar.gz"
          echo SOURCE_TAG=$SOURCE_TAG
          echo FILENAME=$FILENAME
          echo SOURCE_TAG=$SOURCE_TAG >> $GITHUB_ENV
          echo FILENAME=$FILENAME >> $GITHUB_ENV
          update-alternatives --set python /usr/bin/python${PYTHON_VERSION}
          python -V
          python3 -V
          python -m pip install pyinstaller
          pyinstaller --onefile --clean --hidden-import pkg_resources msksidekick.py

      - name: rename toolkit
        run: |
           echo FILENAME=${{ env.FILENAME }}
           tar -C dist -czvf ${{ env.FILENAME }} msksidekick

      - name: Upload Ubuntu
        uses: actions/upload-artifact@v1
        with:
           name: ubuntu18build
           path: ${{ env.FILENAME }}

#   win2019:
#     runs-on: windows-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: checkout msksidekick code
#         uses: actions/checkout@master
#
#       - name: Install dependencies
#         run: |
#           pip install --upgrade pip
#           pip install -r requirements.txt
#           pip install --upgrade setuptools
#           pip install --upgrade pyInstaller
#           pip install --upgrade requests
#           pip install --upgrade termcolor
#
#       - name: Get the version
#         id: get_version
#         run: |
#           if (${env:GITHUB_REF} -match "tags") {
#             $SOURCE_TAG = ${env:GITHUB_REF} -replace 'refs\/tags\/', ''
#           } elseif (${env:GITHUB_REF} -match "heads") {
#             $SOURCE_TAG = ${env:GITHUB_REF} -replace 'refs\/heads\/', ''
#           } else {
#             exit 1
#           }
#           $VERSION_TAG=((((cat msksidekick.py|Select-String -Pattern "VERSION = ") -split ' = ')[1]) -replace '"')
#           $FILENAME="msksidekick-" + $VERSION_TAG + "-win64.zip"
#           echo "SOURCE_TAG=$SOURCE_TAG" >> ${env:GITHUB_ENV}
#           echo "FILENAME=$FILENAME" >> ${env:GITHUB_ENV}
#         shell: powershell
#
#       - name: Install OpenSSL
#         run: |
#           choco install openssl --no-progress
#           echo "INCLUDE=C:\\Program Files\\OpenSSL-Win64\\include;%INCLUDE%" >> ${env:GITHUB_ENV}
#           echo "LIB=C:\\Program Files\\OpenSSL-Win64\\lib;%LIB%" >> ${env:GITHUB_ENV}
#
#       - name: Compile toolkit
#         run: |
#           pip uninstall jeepney -y
#           pip install jeepney
#           pyinstaller --onefile --clean msksidekick.py
#
#       - name: compress toolkit
#         run: |
#           $NAME = "d:\a\msksidekick\msksidekick\${env:FILENAME}"
#           mkdir d:\a\msksidekick\msksidekick\msksidekick
#           copy d:\a\msksidekick\msksidekick\dist\msksidekick.exe msksidekick\
#           Compress-Archive -Path d:\a\msksidekick\msksidekick\dist\msksidekick.exe -DestinationPath d:\a\msksidekick\msksidekick\${env:FILENAME}
#         shell: powershell
#
#       - name: Upload Windows
#         uses: actions/upload-artifact@v1
#         with:
#           name: windowsbuild
#           path: ${{ env.FILENAME }}
#
#   osx:
#     runs-on: macos-latest
#     steps:
#     - name: checkout msksidekick latest code
#       uses: actions/checkout@master
#     - name: Set up Python 3.9
#       uses: actions/setup-python@v2
#       with:
#         python-version: 3.9
#     - name: setup python pkg
#       run: |
#         pip install --upgrade pip
#         if [ -f requirements.txt ]; then cat requirements.txt|grep -v pyinstaller|grep -v  setuptools > requirements.txt.tmp; fi
#         mv requirements.txt.tmp requirements.txt
#
#     - name: Install Dependencies
#       run: |
#         CELL=`brew --prefix perl`
#         OPENLIB=`brew --prefix openssl`
#         CDIR=`pwd`
#         export LIBS="-l ${OPENLIB}/lib/libssl.dylib -l ${OPENLIB}/lib/libcrypto.dylib"
#         echo $LIBS
#
#         pip3 install --upgrade 'setuptools<45.0.0'
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#         pip install --upgrade requests
#         pip install --upgrade termcolor
#         pip3 install pyinstaller
#
#     - name: Get the version
#       id: get_version
#       run: |
#         if (echo ${GITHUB_REF} | grep "/tags/" > /dev/null); then
#           SOURCE_TAG=${GITHUB_REF#refs/tags/}
#         elif (echo ${GITHUB_REF} | grep "/heads/" > /dev/null); then
#           SOURCE_TAG=${GITHUB_REF#refs/heads/}
#         else
#           exit 1
#         fi
#         VERSION_TAG=$(cat ./msksidekick.py|grep "VERSION = "|awk -F' = ' '{ print $2 }'|sed 's/"//g')
#         FILENAME="msksidekick-${VERSION_TAG//[$'\t\r\n ']}-macos.tar.gz"
#         echo "SOURCE_TAG=$SOURCE_TAG" >> $GITHUB_ENV
#         echo "FILENAME=$FILENAME" >> $GITHUB_ENV
#         pip uninstall jeepney -y
#         pip install jeepney
#         pyinstaller --onefile --clean --hidden-import pkg_resources msksidekick.py
#
#     - name: rename toolkit
#       run: |
#         tar -C dist -czvf ${{ env.FILENAME }} msksidekick
#     - name: Upload OSX
#       uses: actions/upload-artifact@v1
#       with:
#         name: osxbuild
#         path: ${{ env.FILENAME }}
